on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: AWS ECR push

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:

  

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: data
        IMAGE_TAG: latest
      run: |
        # Build a docker container and push it to ECR 
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/w5v7x7o5
        docker build -t data .
        docker tag data:latest public.ecr.aws/w5v7x7o5/data:latest
        docker push public.ecr.aws/w5v7x7o5/data:latest


    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USERNAME: ec2_user
        EC2_PUBLIC_IP: 34.200.230.39
      run: |
        # Configure SSH
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts

        # Copy and execute deployment script
        scp -r ./* $SSH_USERNAME@$EC2_PUBLIC_IP:~
        ssh $SSH_USERNAME@$EC2_PUBLIC_IP 'bash -s' < ./path/to/your/deployment-script.sh
        
